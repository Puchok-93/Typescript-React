// ? Различия между type и interface

// ? 1. Разница в синтаксисе создания новых type и interface:

    // ? 1.1 interface

    interface testInterface {
        protocol: 'http' | 'https'; 
        port: 3000 | 3001
    };

    // ? 1.2 type

    type testType = {
        protocol: 'https',
        port: 3001,
    };

// ? 2. Разница в синтаксисе расширения существующих type и interface:

    // ? 2.1 Расширение интерфейса

        interface testNewInterface {
            protocol: 'http' | 'https'; 
            port: 3000 | 3001
        };

        interface testNewInterface {
            role: string
        };

        // ! Расширение интерфейсов таким образом - плохая практика.
        // ! Создавайте их сразу полноценными, а если необходимо внести
        // ! Дополнения - делайте их сразу в строках, где он объявлен.

        // * Исключение - это когда приходится расширять сторонний интерфейс, 
        // * который вы импортировали себе в код и не имеете доступа к оригинальной сущности.

    // ? 2.2 Расширение type

    type testNewType = { 
        protocol: 'http' | 'https'; 
        port: 3000 | 3001 
    };

    // ! Дублирование имени дает ошибку! 
    // ! Расширение возможно только через оператор пересечения (intersection, &)

    // type testNewType = { 
    //     role: string
    // };


// ? 3. В интерфейсы можно помещать только объекты, в type допустимы литералы:

// ? 4. На основании этих отличий мы и выбираем сущность для работы:

// ? 4.1 Если вам нужен примитивный тип в качестве псевдонима – то тут только типы
// ? 4.2 Если вы откуда-то берете готовый интерфейс и его нужно расширить – это интерфейсы
// ? 4.3  Если же вы просто работаете с объектами, то конкретной разницы небудет

// ? 4.4 Но чаще всего для работы с объектами используются интерфейсы!
    // ? Это связано и с дополнением сторонних интерфейсов, и с работой с
    // ? классами, и с тем, что так исторически сложилось в программировании
